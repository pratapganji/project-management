class RequestPayload {
    private Long id;
    private String payload;
    private String apiEndpoint;
    private String headers;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getPayload() { return payload; }
    public void setPayload(String payload) { this.payload = payload; }

    public String getApiEndpoint() { return apiEndpoint; }
    public void setApiEndpoint(String apiEndpoint) { this.apiEndpoint = apiEndpoint; }

    public String getHeaders() { return headers; }
    public void setHeaders(String headers) { this.headers = headers; }
}


<dependency>
  <groupId>io.github.resilience4j</groupId>
  <artifactId>resilience4j-ratelimiter</artifactId>
  <version>2.0.2</version>
</dependency>


Map<String, String> headersMap = Arrays.stream(headers.replaceAll("[{}]", "").split(","))
    .map(s -> s.split("=", 2))
    .filter(arr -> arr.length == 2)
    .collect(Collectors.toMap(
        arr -> arr[0].trim(),
        arr -> arr[1].trim()
    ));



POC Document: BulkRetryScheduler
1. Objective
To implement a Spring Scheduler that periodically retries failed bulk API requests by reading from an audit table, performing health checks, applying rate limiting with burst control, and updating the request status upon success.
2. Requirements
1.	1. Setup Spring Scheduler to run the process periodically (e.g., every 30 seconds).
2.	2. Check Spark YAML health endpoint before retrying failed records.
3.	3. If healthy, retry failed requests from the OM_NURAFLOW_AUDIT_DATA table.
4.	4. Send each request to the Bulk API with appropriate headers and payload.
5.	5. Update the status (SUCCESS/FAILED) and response in the audit table.
6.	6. Apply rate limiting and burst control using Guava's RateLimiter.
3. Components Involved
Component	Description
BulkRetryScheduler	Spring component with @Scheduled task
JdbcTemplate	Used to query and update the Oracle audit table
RestTemplateService	Sends POST requests to Bulk API
RateLimiter	Controls throughput and prevents burst overload
application-dev.yml	Stores API URL and rateLimit property
4. Configuration Example (application-dev.yml)
bulkapiconfig:
  url: https://olympus.api.bulk.uat.cloudgsl.nam.nsroot.net/v2/olympus/service/bulkapi/executeSQLQuery
  dataSource: SPARKYAML
  rateLimit: 5.0
5. Key Code Snippets
@Scheduled Scheduler Setup
@Scheduled(fixedRate = 30000)
public void processFailedRequests() {
    // Executes every 30 seconds
}
Health Check Logic
ResponseEntity<String> healthResponse = restTemplate.getForEntity(HEALTH_CHECK_URL, String.class);
if (healthResponse.getStatusCode() != HttpStatus.OK) {
    LOG.info("❌ Spark Health Check Failed. Skipping...");
    return;
}
Read Failed Records from Oracle
String sql = "SELECT * FROM OM_NURAFLOW_AUDIT_DATA WHERE STATUS = 'FAILED'";
List<Map<String, Object>> failedRecords = jdbcTemplate.queryForList(sql);
RateLimiter Setup and Control
@PostConstruct
public void initRateLimiter() {
    this.rateLimiter = RateLimiter.create(rateLimit);
}
Acquire Permit
rateLimiter.acquire();  // waits for permit
Headers Map Builder
Map<String, String> headersMap = Arrays.stream(headers.replaceAll("[{}]", "").split(","))
    .map(s -> s.split("=", 2))
    .filter(arr -> arr.length == 2)
    .collect(Collectors.toMap(arr -> arr[0].trim(), arr -> arr[1].trim()));
Send Retry Request
ResponseEntity<String> response = restTemplateService.sendRequest(url, HttpMethod.POST, payload, headersMap);
Update Audit Table After Success
private void updateStatus(Long id, String newStatus, String responseBody) {
    String updateSql = "UPDATE OM_NURAFLOW_AUDIT_DATA SET STATUS = ?, RESPONSE_PAYLOAD = ? WHERE ID = ?";
    jdbcTemplate.update(updateSql, newStatus, responseBody, id);
}
6. Logs for Monitoring
LOG.info("row=" + row);
LOG.info("Bulk API Status is UP");
LOG.info("payload=" + payload);
LOG.info("Permit acquired. Sending request...");
LOG.info("Updated record " + id + " as SUCCESS");
7. Benefits
•	✅ Automated retries
•	✅ Audit tracking and updates
•	✅ No overwhelming downstream API (rate limited)
•	✅ Easily configurable
•	✅ Logs for debugging
